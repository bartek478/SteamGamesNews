{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barto\\\\Desktop\\\\projektos\\\\steamnews\\\\src\\\\GameNews.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Game from './Game';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameNews() {\n  _s();\n  const [games, setGames] = useState([]);\n  const [filteredGames, setFilteredGames] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedGame, setSelectedGame] = useState(null);\n\n  // Fetch all games from the Steam API once on component mount\n  useEffect(() => {\n    async function fetchGames() {\n      try {\n        const response = await fetch(`https://store.steampowered.com/api/storesearch/?term=${searchTerm}&cc=US`);\n        if (!response.ok) throw new Error(\"Failed to fetch data\");\n        const result = await response.json();\n        setGames(result.applist.apps);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    fetchGames();\n  }, []);\n\n  // Filter games based on the search term\n  const handleSearchChange = event => {\n    const value = searchTerm;\n    const filtered = games.filter(game => game.name.toLowerCase().includes(value.toLowerCase()));\n    setFilteredGames(filtered);\n  };\n\n  // When a game is clicked, set it as the selected game\n  const handleGameClick = game => {\n    setSelectedGame(game);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game News\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"search game\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearchChange,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filteredGames.slice(0, 10).map(game => /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: () => handleGameClick(game),\n        children: game.name\n      }, game.appid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), selectedGame && /*#__PURE__*/_jsxDEV(Game, {\n      appid: selectedGame.appid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(GameNews, \"ldK8fsyUOUXyf1/rgjOY9GBsWdk=\");\n_c = GameNews;\nexport default GameNews;\nvar _c;\n$RefreshReg$(_c, \"GameNews\");","map":{"version":3,"names":["useState","useEffect","Game","jsxDEV","_jsxDEV","GameNews","_s","games","setGames","filteredGames","setFilteredGames","searchTerm","setSearchTerm","selectedGame","setSelectedGame","fetchGames","response","fetch","ok","Error","result","json","applist","apps","error","console","handleSearchChange","event","value","filtered","filter","game","name","toLowerCase","includes","handleGameClick","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","onClick","slice","map","appid","_c","$RefreshReg$"],"sources":["C:/Users/barto/Desktop/projektos/steamnews/src/GameNews.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport Game from './Game';\r\n\r\nfunction GameNews() {\r\n  const [games, setGames] = useState([]);\r\n  const [filteredGames, setFilteredGames] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedGame, setSelectedGame] = useState(null);\r\n\r\n  // Fetch all games from the Steam API once on component mount\r\n  useEffect(() => {\r\n    async function fetchGames() {\r\n      try {\r\n        const response = await fetch(`https://store.steampowered.com/api/storesearch/?term=${searchTerm}&cc=US`);\r\n        if(!response.ok)\r\n            throw new Error(\"Failed to fetch data\")\r\n        const result = await response.json();\r\n        setGames(result.applist.apps);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    fetchGames();\r\n  }, []);\r\n\r\n  // Filter games based on the search term\r\n  const handleSearchChange = (event) => {\r\n    const value = searchTerm;\r\n    const filtered = games.filter(game =>\r\n      game.name.toLowerCase().includes(value.toLowerCase())\r\n    );\r\n    setFilteredGames(filtered);\r\n  };\r\n\r\n  // When a game is clicked, set it as the selected game\r\n  const handleGameClick = (game) => {\r\n    setSelectedGame(game);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Game News</h1>\r\n      <input type=\"text\" placeholder=\"search game\" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)}/>\r\n      <button onClick={handleSearchChange}>Search</button>\r\n      <div>\r\n        {filteredGames.slice(0, 10).map(game => (\r\n          <p key={game.appid} onClick={() => handleGameClick(game)}>\r\n            {game.name}\r\n          </p>\r\n        ))}\r\n      </div>\r\n      {selectedGame && <Game appid={selectedGame.appid} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameNews;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}