{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barto\\\\Desktop\\\\projektos\\\\steamnews\\\\src\\\\GameNews.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Game from './Game';\nimport GameDetail from './GameDetail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameNews() {\n  _s();\n  const [games, setGames] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  /*const fetchData = async () => {\r\n        setIsLoading(true)\r\n        try {\r\n            const response = await fetch(`https://store.steampowered.com/api/storesearch/?term=${searchTerm}&cc=US`)\r\n            if(!response.ok)\r\n                throw new Error(\"Failed to fetch data\")\r\n              const result = await response.json()\r\n            console.log(result.Search)\r\n            setGames(result.Search)\r\n            setIsLoading(false)\r\n        }\r\n        catch(error) {\r\n            console.log(error)\r\n        }\r\n    }   */\n\n  const fetchData = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`http://localhost:5000/api/search?term=${searchTerm}`);\n      if (!response.ok) throw new Error(\"Failed to fetch data\");\n      const result = await response.json();\n      setGames(result.items || []);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n    }\n  };\n  const handleSearch = () => {\n    fetchData();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game News\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"search game\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: games.map((game, index) => /*#__PURE__*/_jsxDEV(Game, {\n        param: game\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GameDetail, {\n      appId: game.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(GameNews, \"Z5a3THeH87TmkHve49Nt6oXq+BI=\");\n_c = GameNews;\nexport default GameNews;\nvar _c;\n$RefreshReg$(_c, \"GameNews\");","map":{"version":3,"names":["useState","useEffect","Game","GameDetail","jsxDEV","_jsxDEV","GameNews","_s","games","setGames","searchTerm","setSearchTerm","isLoading","setIsLoading","fetchData","response","fetch","ok","Error","result","json","items","error","console","handleSearch","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","game","index","param","appId","id","_c","$RefreshReg$"],"sources":["C:/Users/barto/Desktop/projektos/steamnews/src/GameNews.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport Game from './Game';\r\nimport GameDetail from './GameDetail';\r\n\r\nfunction GameNews() {\r\n  const [games, setGames] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  /*const fetchData = async () => {\r\n        setIsLoading(true)\r\n        try {\r\n            const response = await fetch(`https://store.steampowered.com/api/storesearch/?term=${searchTerm}&cc=US`)\r\n            if(!response.ok)\r\n                throw new Error(\"Failed to fetch data\")\r\n\r\n            const result = await response.json()\r\n            console.log(result.Search)\r\n            setGames(result.Search)\r\n            setIsLoading(false)\r\n        }\r\n        catch(error) {\r\n            console.log(error)\r\n        }\r\n    }   */\r\n\r\n    const fetchData = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                const response = await fetch(`http://localhost:5000/api/search?term=${searchTerm}`);\r\n                if (!response.ok) \r\n                    throw new Error(\"Failed to fetch data\");\r\n\r\n                const result = await response.json();\r\n                setGames(result.items || []);\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                console.error(error);\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n    const handleSearch = () => {\r\n        fetchData()\r\n    }\r\n\r\n\r\n  return (\r\n    <div>\r\n        <h1>Game News</h1>\r\n        <input type=\"text\" placeholder=\"search game\" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)}/>\r\n        <button onClick={handleSearch}>Search</button>\r\n        <div>\r\n            {\r\n                games.map((game, index) => \r\n                    <Game key={index} param={game}/>\r\n                )\r\n            }\r\n        </div>\r\n        {<GameDetail appId={game.id}/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameNews;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAEjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGI,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;IACtBD,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyCN,UAAU,EAAE,CAAC;MACnF,IAAI,CAACK,QAAQ,CAACE,EAAE,EACZ,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MAE3C,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACpCX,QAAQ,CAACU,MAAM,CAACE,KAAK,IAAI,EAAE,CAAC;MAC5BR,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBT,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAEL,MAAMW,YAAY,GAAGA,CAAA,KAAM;IACvBV,SAAS,CAAC,CAAC;EACf,CAAC;EAGH,oBACET,OAAA;IAAAoB,QAAA,gBACIpB,OAAA;MAAAoB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBxB,OAAA;MAAOyB,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC,aAAa;MAACC,KAAK,EAAEtB,UAAW;MAACuB,QAAQ,EAAGC,CAAC,IAAKvB,aAAa,CAACuB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACjHxB,OAAA;MAAQ+B,OAAO,EAAEZ,YAAa;MAAAC,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9CxB,OAAA;MAAAoB,QAAA,EAEQjB,KAAK,CAAC6B,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAClBlC,OAAA,CAACH,IAAI;QAAasC,KAAK,EAAEF;MAAK,GAAnBC,KAAK;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEJ,CAAC,eACLxB,OAAA,CAACF,UAAU;MAACsC,KAAK,EAAEH,IAAI,CAACI;IAAG;MAAAhB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEV;AAACtB,EAAA,CA1DQD,QAAQ;AAAAqC,EAAA,GAARrC,QAAQ;AA4DjB,eAAeA,QAAQ;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}